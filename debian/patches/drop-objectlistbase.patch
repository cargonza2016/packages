From 6186a9de2a0c74daf210ca85a0db877bae766594 Mon Sep 17 00:00:00 2001
From: Lin Tan <lin.tan@intel.com>
Date: Tue, 25 Aug 2015 10:46:40 +0800
Subject: [PATCH] Remove ObjectListBase

ObjectListBase is not used in Ironic at the moment, we should add it
when it is necessary.

Partial-Bug: #1488270
Change-Id: Ifc2aaa1fa09d95f1cfa6ed488f10871666b7fb3d
---
 ironic/objects/base.py               | 15 ++-------------
 ironic/tests/objects/test_objects.py | 18 ------------------
 2 files changed, 2 insertions(+), 31 deletions(-)

diff --git a/ironic/objects/base.py b/ironic/objects/base.py
index 75aff8c..1053c3c 100644
--- a/ironic/objects/base.py
+++ b/ironic/objects/base.py
@@ -412,14 +412,6 @@ def obj_refresh(self, loaded_object):
                 self[field] = loaded_object[field]
 
 
-class ObjectListBase(object_base.ObjectListBase):
-    # NOTE(lintan): These are for transition to using the oslo base object
-    # and can be removed when we move to it.
-    fields = {
-        'objects': list,
-    }
-
-
 class IronicObjectSerializer(object_base.VersionedObjectSerializer):
     # Base class to use for object hydration
     OBJ_BASE_CLASS = IronicObject
@@ -428,12 +420,9 @@ class IronicObjectSerializer(object_base.VersionedObjectSerializer):
 def obj_to_primitive(obj):
     """Recursively turn an object into a python primitive.
 
-    An IronicObject becomes a dict, and anything that implements ObjectListBase
-    becomes a list.
+    An IronicObject becomes a dict
     """
-    if isinstance(obj, ObjectListBase):
-        return [obj_to_primitive(x) for x in obj]
-    elif isinstance(obj, IronicObject):
+    if isinstance(obj, IronicObject):
         result = {}
         for key, value in obj.items():
             result[key] = obj_to_primitive(value)
diff --git a/ironic/tests/objects/test_objects.py b/ironic/tests/objects/test_objects.py
index 3f29fb3..e36f3ae 100644
--- a/ironic/tests/objects/test_objects.py
+++ b/ironic/tests/objects/test_objects.py
@@ -142,13 +142,6 @@ def test_dt_deserializer(self):
         self.assertIsNone(utils.dt_deserializer(None, None))
         self.assertRaises(ValueError, utils.dt_deserializer, None, 'foo')
 
-    def test_obj_to_primitive_list(self):
-        class MyList(base.ObjectListBase, base.IronicObject):
-            pass
-        mylist = MyList(self.context)
-        mylist.objects = [1, 2, 3]
-        self.assertEqual([1, 2, 3], base.obj_to_primitive(mylist))
-
     def test_obj_to_primitive_dict(self):
         myobj = MyObj(self.context)
         myobj.foo = 1
@@ -156,17 +149,6 @@ def test_obj_to_primitive_dict(self):
         self.assertEqual({'foo': 1, 'bar': 'foo'},
                          base.obj_to_primitive(myobj))
 
-    def test_obj_to_primitive_recursive(self):
-        class MyList(base.ObjectListBase, base.IronicObject):
-            pass
-
-        mylist = MyList(self.context)
-        mylist.objects = [MyObj(self.context), MyObj(self.context)]
-        for i, value in enumerate(mylist):
-            value.foo = i
-        self.assertEqual([{'foo': 0}, {'foo': 1}],
-                         base.obj_to_primitive(mylist))
-
 
 class _BaseTestCase(test_base.TestCase):
     def setUp(self):
